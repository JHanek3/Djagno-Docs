Part 1
  Creation of a basic poll application
    A public site that lets people view polls and vote for them
    An admin site that lets you add, change, and delete polls
  
  Creating a project
    auto-generate code to establish a Django project
    a collection of settings for an instance of Django, including db configuration, Django-specific options and application-specific settings
      django-admin startproject mysite
        the site is called mysite
        the syntax starter is startproject
    created a mysite directory in the current directory
    mysite
      manage.py
      mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py
    outer mysite/ -> root directory is just a container for your project (name does not matter)
      manage.py  -> a command-line utility that lets you interact with this Django project in various ways (https://docs.djangoproject.com/en/2.2/ref/django-admin/)
      mysite/    -> directory is the actual Python package for your project. This is the Python package name you'll need to use to import anything (mysite.urls)
        mysite/__init__.py -> an empty file that tells Python that this directory should be considered a python package
        mysite/settings.py -> Settings/configuration for this django project (https://docs.djangoproject.com/en/3.1/topics/settings/)
        mysite/urls.py     -> The URL declarations for this Django project; a table of contents of your Django-powered site (https://docs.djangoproject.com/en/3.1/topics/http/urls/)
        mysite/asgi.py     -> An entry-point for WSGI-compatible web servers to serve your project

The development Server
  outer mysite directory
    python manage.py runserver
  lightweight webserver written purely in Python
  develop things rapidbly, without having to del with configuring a production server (until production)
  don't use this server in anything resembling a production enviornment (only for developing)
  Changing the port
    by default runs on port 8000
    to change pass it as a command-line argument
      python manage.py runserver 8080
  adding files dont trigger a restart

Creating the polls app
  now that the enviornment -a "project" is set up
  Each application consists of a Python package that follows a certain convention
  Django comes with a utility that automatically generates the basic directory structure of an app
  Projects vs. Apps
    an app is a web application that does something                               (An app can be in multiple projects)
    a project is a collection of configuration and apps for a particular website (project can contain multiple apps)
  apps can live anywhere in the python path
    we'll create our app right next to manage.py so that it can be imported as its own top-level module rather tahn a submodule of mysite
    same directory as manage.py
      python manage.py startapp polls
  creates a directory called polls
    polls/
      __init__.py
      admin.py
      apps.py
      migrations/
        __init__.py
        models.py
        tests.py
        views.py

Write your first view
  mysite/polls/views.py
    imported HttpResponse with a function called index that returns HttpResponse
  Simplest view possible, to call the view need to map it to a url
  To create a URL conf in the polls directory, create a file called urls.py
  mysite/polls/urls.py
    import views and path
    urlpatterns = [path('', views.index, name='index')]
  point the root URLconf at the polls.urls module (the one you just made)
  mysite/urls.py
    path('polls/', include('polls.urls))
  include() function allows referencing other URLconfs
    Django encounters include(), chops off whatever part of the URL matcched up to the point
      then sends the remaining string to the include URLconf for processing
    make it easy to plug and play urls
    since polls are in their own URLconf(polls/urls.py) they can be placed under any name
  always use include when you inculde other URL patterns
  http://localhost:8000/polls/ works here and not /
  path() is passed four arguments, two required route and view and two option kwargs and name
    route
      is a string that contains a URL pattern
      django starts at the first pattern in urlpatterns and make its way down the list
      compare the requested URL against each pattern until it finds one that matches
      patterns dont search GET and POST parameters
    view
      when django finds a matching pattern, it calls the specifed view function with an
        httpRequest object as the first argument and any captured values from the route
        as keyword arguments
    kwargs
      arbitrary keyword arguments can be passed in a dictionary to the target view
    name
      naming your url lets you refer to unambiguously form elsewhere in Django (templates)
      allows you to make global changes to the URL patterns of your project with one file

Part 2
  Setup the database, create the first model and introduction to the admin site

Database Setup
  mysite/settings.py
  configuration uses SQLite
    included in Python
  PostgreSQL, to avoid database-switching headaches down the road
  To use another database, install the appropriate database bindings and change
    the following keys in the DATABASES 'default' item to match
  ENGINE
    django.db.backend.sqlite3, django.db.backends.postgresql
  NAME
    the name of your database
    database will be a file on your computer
    NAME should be the full absolute path
    os.oath.join(BASE_DIR, 'db.sqlite3) will store the file in your project directory
  CREATE THE OTHER DATABASE HERE
  set TIME_ZONE to your timezone
    UTC-5
  INSTALLED_APPS holds hte names of all django applications that are activated in this instance
    apps can be used in multiple projects and you can package and distribute them for use by others
      in their projects
  INSTALLED_APPS contains the following
    django.contrib.admin       -> the admin site
    django.contrib.auth        -> An authentication system
    django.contrib.contentypes -> A framework for content types
    django.contrib.sessions    -> A session framework
    django.contrib.messages    -> A messaging framework
    django.contrib.staticfiles -> A framework for managing static files
  included by default
  make use of at least one database, we need to create the tables in the database before we can use them
    python manage.py migrate
  migrate command looks at INSTALLED_APPS SETTING and creates any necessary tables according to settings

Creating models
  essential database layout, with additional metadata
  A model is the single, definitive source of truth about your data
    contains the essential fields and behavoirs of the data you're storing
    DRY principle
    Define your model in one place and derive things from it
    includes migrations
  create two models
    Question and Choice
      Question has a question and a publication date
      Choice has two fields the text of coice and a vote tally
    Each choice is associated with a question
  edit polls/models.py
    made classes for Question and Choice
  Each model is represented by a class that subclasses django.db.models.Model
  Each field is represented by an instance of a Field class (CharField, IntegerField), tells data field
  Name of each field instance (question_text, question) is the field's name
      use value in Python code, and your database will use it as a column name
  Can use an optional first postitional argument to a Fiueld to designate a human-readable name
    by default Django uses machine-friendly
    we've only defined one with Question.pub_date
  Some Field classes have required arguments, CharField(requires that you give a max_length)
  Fields can also have various optional arguments, default=0
  ForeignKey, relationship, tells Django each Choice is related to a single Question.

Activating Models
  small bit of model gives Django a lot of information
    Create a database scheme (CREATE TABLE statements) for this app
    Create a Python database-access API for accessing Question and Choice Objects
  first need to tell our Project that the polls app is installed
    Django apps are pluggable, put them anywhere
  to include the app into our project, need to add a reference in the config class in
    INSTALLED_APPS
  mysite/settings.py
    INSTALLED_APPS = ['polls.apps.PollsConfig']
    now Django knows to include the polls app
  python manage.py makemigrations polls
    telling Django that you've made some changes to your models (you made a new one)
      and to store these changes as migrations
  Migrations are how Django stores changes to your models (db schema) - files on a disk
    you can edit these migrations
  migrate
    will run migrations automatically for you
  python manage.py sqlmigrate polls 0001
    sqlmigrate command takes migration names and returns their SQL
    table names are automatically generated by combining the name of the app and lowercase name of the model
    primary keys are added automatically
    Django appends _id to the foreign key field name
    Foreign Key relationship is made explicit by a FOREIGN KEY constriant
    tailored to the database, for specific field types and quotes
    sqlmigrate doesnt actually run the migration on your database
      just prints to the screen so you see what Django thinks is required
  python manage.py check
    checks for any problems in your project without making migrations or touching the db
  python mange.py migrate
    run migrate again to create those model tables in your db
    initial model go created
  migrate command takes all the migrations that havent been applied and runs them against your db
    synchronizing the changes
  Migrations are powerful and let you change your models over time
    without the need to delete your database or tables, make new ones
    specializes in upgrading your db live, without losing data
  3-STEP GUIDE to making model changes
    change your models in (models.py)
    Run python manage.py makemigrations to create migrations for those chagnes
      python manage.py sqlmigrate polls 0001
      python manage.py check
    Run pythono manage.py migrate apply those changes to the database

Playing with the API
  hop into the interactive python shell
  python manage.py shell
    use this because manage.py sets the DJANGO_SETTINGS_MODULE enviornment variable
      which gives Django the Python import path to your mysite/settings.py
  from polls.models import Choice, Question
  Question.objects.all() 
    no questions are in the system yet
  Create a new question
    need timezone.now()
    from django.utils import timezone
    q = Question(question_text="What's new?", pub_date=timezone.now())
  Save the object into the database, you have to call save() explicitly
  q.save()
  q.id >>>1
  Access the model field values via Python attributes
    q.question_text
    q.pub_date
  Change values by changing the attributes, then calling save()
    q.question_text = "What's up?"
    q.save()
  now to see it
    Question.objects.all()
    Question: Question object (1) is not very readable, edit the question model
      def __str__(self):
        return self.question_text
    important to add __str__() methods to your models, to help for readability
  Add a custom model
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
  quit(), did our save work? Question.objects.all()
  Keyword arguments like filter
    Question.objects.filter(id=1)
    Question.objects.filter(question_text__startswith='What')
  Get the question that was published this year
    from django.utils import timezone
    current_year = timezone.now().year
    Question.objects.get(pub_date_year=current_year)
  Request an ID that doesnt exist
    DNE
  Lookup by a primary key
    Question.objects.get(pk=1)
    q.was_published_recently()
      >>>True
  Give the question a couple of Choices create call constructs a new Choice object
    q = Question.objects.get(pk=1)
    q.choice_set.all()
      -- none so far
  Create three choices
    q.choice_set.create(choice_text='Not much', votes=0)
  Choice objects have API access to their related Question objects
    c.question
  Question objects get access to Choice objects
    q.choice_set.all()
  Counts the number of choices
    q.choice_set.count()
  Use double underscores to seperate relationships
    Choice.objects.filter(question__pub_date__year=current_year)
  Delete one of the choices
    c = q.choice_set.filter(choice_text__startswith='Just hacking')
    c.delete()

Introducing the Django Admin
  separation between content publishers and public
  unified interface for site administrators to edit content

Creating an admin user
  follow the prompt

Start the development server
  TIME_ZONE = 'America/Chicago'

Make the poll app modifiable in the admin
  Our poll app is not displayed on the admin index page
  admin Question objects have an admin interface
  polls/admin.py
    from .models import Question
    admin.site.register(Question)

Explore the admin funcitonality
  The form is automatically generated from the Question model
  Different model field types correespond to the appropriate HTML input widget
  DateTimeField gets free JS shortcuts
  Save - save changes and returns to the change-list
  Save and continue editing
  Save and add another
  Delete
  You have access to the change history

Part 3
  Creating the public interface
  https://docs.djangoproject.com/en/2.2/topics/http/urls/

Overview
  view is a type of Web page that serves a specific funtion with a specific template
  Our views:
    Question index page   ->  Displays the latest few questions
    Question detail page  -> Displays a question text, with no results but a form to vote
    Question results page -> Displays results for a particular question
    Vote action           -> Handles voting for a particular choice in a particular question
  web page and other content are delievered by views, represented by a simple Python function
  choose a view by examining the URL thats requested
  URL pattern is similar to regular patterns
  To get from a URL to a view, Django uses URLconfs
    a URLconf maps URL patterns to views

Writing more views
  add a few more views to 
  polls/views.py
    def detail(request, question_id):
      return HttpResponse("You're looking at question %s." % question_id)
  now wire these new views into the polls.urls module by adding the following path() calls
  polls/urls.py
    added to the url patterns array
    path('<int:question_id>/vote/', views.vote, name='vote')
  /polls/34/
    shows you are looking at question 34
  Whens somebody requests a page from your website
    Django will load the mysite.urls  Python module beacuse its pointed to the ROOT_URLCONF settings
    finds the variable named urlpatterns, traverses the pattern
    After finding the match at 'polls/', strips the matching text and sends the remaining text
      to the polls.urls
    there it matches <int:question_id\>/, resulting a call to the detail view()
      detail(request=<HttpRequest object, question_id=34)
    int:question_id captures part of the url and sends it as a keyword argument to the
      view function
    :question_id defines the name that will be used to identify the matched pattern
    <int is a converter that determines what patterns should match this part of the URL path

Write views that actually do something
  each view is responsible for doing one of two things
    returning an HttpResponse object containing the content for the requested page
    raising an exception such as Http404
  your view can 
    read records from a db, can use template system such as Django
    generate a PDF file
    output XML
    create a ZIP file
  all Django wants is that HttpResponse or an exception
  new index() view which will display that latest 5 poll questions in the system
    separated by commas, according to publication date
  from .models import Question
    def index(request):
      latest_question_list = Question.objects.order_by('-pub_date')[:5]
      output = ', '.join([q.question_text for q in latest_question_list])
      return HttpResponse(output)
  this is a problem, the page's design is hard-coded in the view
    change the view have to edit this code, use Django's template system to fix this
  create a dir called templates in your polls directory
  your TEMPLATES setting describe how Django will load and render templates
    default settings file configures a DjangoTemplates backend whose APP_DIRS set to True
  create another directory called polls
    create a file called index.html
  looks like this polls/templates/polls/index.html
  you can refer to this template within Django as polls/index.html
    Namespace them, putting templates inside another directory named for the applicaiton itself
  polls/templates/polls/index.html put some template code
    update polls/views.py
    from django.template import loader
    def index(request):
      latest_question_list = Question.objects.order_by('-pub_date')[:5]
      template = loader.get_template('polls/index.html')
      context = {
          'latest_question_list': latest_question_list,
      }
      return HttpResponse(template.render(context, request))
    this code loads the template code polls/index.html and passes it a context
      context is a dicitonary mapping template variable names to python objects
    load the page by "/polls/"

A shortcut: render()
  common idiom to load a template, fill a context and return an HttpResponse
    django provides a shortcut, render()
  new index view rewritten, removed template and gave render
  def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {
        'latest_question_list': latest_question_list,
    }
    return render(request, 'polls/index.html', context)
  render() takes the requst object as its first argument, template name as its second argument,
    and a dictionary as its optional third argument
    returns an HttpResponse object of the given tepmlate rendered within the given context

Raising a 404 error
  polls/views.py
    def detail(request, question_id):
      try:
          question = Question.objects.get(pk=question_id)
      except Question.DoesNotExist:
          raise Http404("Question does not exist")
      return render(request, 'polls/detail.html', {'question': question})
    raises a Http404 error if a question requested has a DNE id
  polls/templates/polls/detail.html
    {{ question }}

A shortcut: get_object_or_404()
  common idom to use get() and raise Http404 if object DNE
  rewritten detail in polls/views.py
  def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {
        'latest_question_list': latest_question_list,
    }
    return render(request, 'polls/index.html', context)
  the get_object_or function takes a Django model as its first argument and an arbitrary
    number of keyword arguments, which it passes to the get() function of the model's manage
    and returns Http404 if the object DNE
  get_list_or_404(), using filter() instead of get()

Use the template system
  polls/detail.html
  the template system uses dot-lookup syntax to access variable attributes
    {{ question.question_text }}
  https://docs.djangoproject.com/en/2.2/topics/templates/

Removing hardcoded URLs in templates
  <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    this is hardcoded, becomes challenging to change URLs
    path() functions in the polls.urls module you can remove a reliance
      on specific URL paths defined in your url configurations by using {% url %}
  <li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>
    looks up the URL definition as specified in the polls.urls module
  if you wnat to change the URL of the polls, change it in polls/urls.py
    path('specifics/<int:question_id>/', views.detail, name='detail'),

Namespacing URL names
  in real Django projects, there might be more than one app
  How does Django differentiate the URL names?
    How to tell Django know which app view to create for a url when using {% url %}
  ANSWER add namespaces to your URLconf
  polls/urls.py and add app_name
    app_name = polls
  polls/index.html change the li
    <li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>

Part 4
  Focus on simle form processing and cutting down our code

Write a simple form
  Update our poll detail template to contain an HTML form element
  polls/template/polls/detail.html
    displays a radio button for each question choice
    value of each radio button is the associated question choice's id
    name of each radio button is choice
      meaning when somebody selects one of the radio buttons and submits the form, itll
      send the POST data choice=# where # is the ID of the selected choice
    action to {% url 'polls:vote' question.id %} method="post"
      act of submitting the form will alter data server-side
    forloop.counter indicates how many times the for tag has gone through its loop
    POST form means we care about CSRF
      all POST forms are targeted at internal urls {% csrf_token %}
  polls/urls.py
    correct path
  polls/views/py
    request.POST is a dictionary-like object that lets you access submitted data by key name
      request.POST['choice'] returns the ID of the selected choice, as a string request.POST
      also provides request.GET for accessing GET data in the same way, using request.POST
        so data is only altered via POST
    request.POST['choice'] will raise KeyError if choice wasn't provided in the POST data
      the above code checks for KeyError and redisplays the question form with an error message
    After incrementing the choice count, the code returns an HttpResponseRedirect rather than
      a normal HttpResponse
      takes a single argument the URL to which the user will be redirecter
      Always return HttpResponseRedirect after successfully dealing with POST data
    reverse()
      helps avoid having to hardcode a URL in the view function
      given the name of the view that we want to pass control to and the variable portion
        of the url pattern that points to that view
      reverse() returns '/polls/3/results/'
    3 is the value of the question.id and redirected URL will call the 'results' view to display
  polls/views.py
    need to rewrite for the redirect
    almost the exact same as detail()
      difference is the template name
  polls/results.html

Use generic views: Less code is better
  https://docs.djangoproject.com/en/2.2/topics/class-based-views/
  detail() and results() are simple, index() is similar
  getting data from the db according to a parameter passed in the URL,
    loading a template and returning the rendered template
  "generic views system"
    abstract common patterns to the point where you dont need Python code in the app
    Convert the URLconf
    Delete some of the old, unneeded views
    Introduce new views based on Django's generic views

Amend URLconf
  polls/urls.py
    path('', views.IndexView.as_view(), name='index')
    changed from <question_id> to <pk>

Amend Views
  remove index, detail, and results views and use Django's generic views instead
  polls/views/py
  using two views ListView and DetailView
    display a list of objects and display a detail page for a particular type of project
    each generic view needs to know what model to act upon, model attribute
    DetailView generic view expects the primary key value captured from the URL to be
      called "pk", so we've changed question_id to pk for the generic views
  By default DetailView uses a template called <app name/>model name>_detail.html
    polls/question_detail.html, template_name attribute is used to tell Django to use
      a specific template name instead of the autogenerated default tempalte name
  Also specifiy the template_name for the results list view
    ensures that the results view and the detail view have a different appearance when rendered
      even though they are both DetailViews
  ListView generic view uses a default template as well; we use template_name to tell ListView
    to use our existing "polls/index.html" template
  DetailView the question variable is provided automatically, since we're using a Django model
    Question, Django is able to determine an appropriate name for the context variable
  ListView, the automatically generated context variable is question_list
    to override we provide context_object_name attribute and specify
      latest_question_list
  lot easier to just tell Django to use the variable you want

Part 5
  Create some automated tests for our web application

What are automated tests?
  Tests are simple routines that check the operation of your code
  Operates at different levels, like the shell testing
  Automated tests is the testing work done for you by the system
  Create a set of tests once, and then as you make changes you can check that your code
    still works as intended

Why you need to create tests?
  Django is not the last bit of progamming I will do

Tests will save you time
  checking that it seems to work only goes so far
  more sophisticated application could have dozens of interactions between components
  A change in one component could affect the app's behavoir
    use twenty different variations of your test data
  automated tests can do this for you
    tests will also identify the code that's causing the error
  Writing tests is a lot more fulfilling than spending hours testing your application manually

Test don't just identify problems, they prevent them
  Not a negative aspect of development
  Tests light up the code from the inside, when something goes wrong, they focus light on
    the part that has gone wrong

Test make your code more attractive
  Developers might not look at it since it lacks tests

Tests help teams work together
  Tests guarantee that collegues dont inadvertently break your code
  Need to be good at writting tests for Django

Basic Testing Strategies
  Test-Driven development
    write their tests before they write their code
    describe a problem, create code to solve it
    simply formalizes the problem in a Python test case
    Newcomers will create some code and later decide it should have some tests
      never too late to get started
    write your first test when you make a change, add a feature or fix a bug

Writing our first test
We identify a bug
  bug in the polls application: Question.was_published_recently() returns True if a
    question pub_date is in the future
  confirm the bug with the shell
    python manage.py shell
    future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))
    future_question.was_published_recently() >>> True

Create a test to expose the bug
  Conventional place is the application's tests.py file; the testing system will automatically
    find tests in any file whose name begins with test
  polls/tests.py (are already exists)
  class QuestionModelTests(TestCase):
    created django.test.TestCase subclass with a method that creates a Question instance
      with a pub_date in the future
    self.assertIs(future_question.was_published_recently(), False) then check the output
      of was_published_recently which should be false

Running Tests
  in the terminal we can run our tests
  python manage.py test polls
    manage.py test polls looked for tests in the polls application
    it found a subclass of django.test.TestCase
    it created a special database for the purpose of testing
    it looked for test methods - ones whose names begin with test
    in test_was_published_recently_with_future_question it created a Question instance whose pub_date
      field is 30 days in the future
    and using assertIs() method, it discovered that was_published_recently() returns True
      not False
  
Fixing the bug
  We know what the problem: Question_was_published_recently() should return False for pub_date
    in the future
  polls/models.py
    def was_published_recently(self):
      now = timezone.now()
      return now - datetime.timedelta(days=1) <= self.pub_date <= now
  run the test, and our test passes

More comprehensive Tests
  further pin down the was_published_recently(), fix one bug introduce another
  added two more test methods to the same class
  confirm that Question.was_published_recently() returns sensible values for past, recent, and future quesitons

Test a view
  App will publishe any question, including one from the future
  Setting a pub_date in the future should mean that the Question is published at that moment,
    but invisible until then

A test for a view
  Fixed the bug above, wrote the test first and then the code to fix it
  simple example of test-driven development

The Django Test Client
  a test Client to simulate a user interacting with the code at the view level. We can use it in tests.py
    or even in the shell
  python manage.py shell
  from django.test.utils import setup_test_enviornment
  setup_test_environment()
    installs a template renderer, allows us to examine some additional attributes on response such
      as response.context
    does not setup a test database, so would be run against the exisitng database and output might differ slightly
  import test client class
  from django.test import Client
  client = Client()
  we can ask the client to do some work for us
    get a response form '/', expect a 404
    response = client.get('/')
    response.status_code >>> 404
    expect to find something at '/polls/'
    use reverse() rather than the hardcoded url
    from django.urls import reverse
    response = client.get(reverse('polls:index'))
    response.status_code
    response.content
    response.context['latest_question_list']

Improving our view
  The list of polls shows polls that arent published yet (they have a future published date)
  polls/views.py need to amend the get_quesryset() and change it so that it also checks the date
    by comparing it with timezone.now()
    from django.utils import timezone
    def get_queryset(self):
      """
      Return the last five published questions (not including those set to be
      published in the future).
      """
      return Question.objects.filter(
          pub_date__lte=timezone.now()
      ).order_by('-pub_date')[:5]
    not returns a queryset containing Question whose pub_date is less than or quest to that of
      timezone.now()
  
Testing our new view
  Lets create a test to show that our future published_dates are not shown
  polls/test.py
    create_question takes some repition out of the process of creating questions
    test_no_question does not create any questions, but checks the message "No polls are available"
      and verifies the latest_question_list is empty
      assertContains() and assertQuerysetEqual()
    test_past_question, create a question and verify that appears in the list
    test_future_question, create a question with pub_date in the future
      database is reset for each test method, so the first question is no longer there
        so again the index shouldnt have any questions in it
  in effect, we are using the tests to tell a story of admin input and user experience on
    the site, and checking that every state and for every new chagne in the state of the
    system is published

Testing the DetailView
  add a constraint to DetailView so users cannot access future posts
  polls/views.py
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())
  write some tests polls/tests.py to check that a Question whose pub_date is in the past
    can be displayed and the future is not

Ideas for more tests
  add a similar get_queryset method to ResultsView and create a new test class for that view
  silly that Questions can be published on the site and have no choices, views check for this and 
    exclude such Questions
    test would create a Question without Choices and then test that its not published
  create a similar Question with Choices and test that it was published
  Logged-in admin users should be allowed to see unpublished Questions, but not visitors

When testing, more is better
  It doesn't matter
  Write a test once and then forget about it
  Our failed tests tell us exactly which tests need to be amended to bring them up to date
  Testing, redudancy is a good thing
  Good rules of thumb:
    A separate TestClass for each model or view
    A separate test method for each set of conditions you want to test
    Test method names that describe their function

Further Testing
  Selenium to test the way your HTML actually renders in a browser
  Django include LiveServerTestCase to facilitate integration with Selenium
  continuous integration for every commit is possible
  Check code coverage for untested parts of your applciations
    helps identify fragile or dead code
  if you cant test it, it can be refactored or removed
    https://docs.djangoproject.com/en/2.2/topics/testing/advanced/#topics-testing-code-coverage
  https://docs.djangoproject.com/en/2.2/topics/testing/

Part 6
  Add a stylesheet and image=
  Web applications need to serve additional files such as images, JS, and CSS
    refer to static files
  dealing with multiple sets of static files provided byeach application can get messy
    django.contrib.staticfiles is for
      collects static files from each of your applications into a single location for easy production

Customize your app's look and feel    
  Create a directory called static in polls
    Django will look for static files there
  STATICFILES_FINDERS setting contains a list of finders that know how to discover static
    files from various sources
  AppDirectoriesFinder looks for a static subdirectory in each of the INSTALLED_APPS
    within static directory create another directory called polls
      styles.css
  you can refer to this file as polls/style.css
  Static file namespacing
    might be able to get away with putting our static files inside polls/static
    Django would choose the first static file it finds whose name matches
      bad if same directory name in another app
    That is why we namespace, that is by putting static files inside another directory
      named for the application itself
  polls/templates/polls/index.html
    {% load static %}
    <link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}"
    {% static %} template tag generates the absolute URL of static files

Adding a background image
  create a subdirectory for images in polls/static/polls
  and link with 
    body {
      background: white url("images/background.gif") no-repeat;
    }
  https://docs.djangoproject.com/en/2.2/howto/static-files/
  https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/
  https://docs.djangoproject.com/en/2.2/howto/static-files/deployment/

Part 7
  Focus on customizing Django's automatically-generated admin site

Customize the adming form
  Registering the Question model with admin.site.register(Question)
    Django was able to construct a default form representation
    want to customize how the admin form looks and works
      do this by telling Django the options you want when you register the object
  reorder the fieonds on the edit form
  polls/admin.py
    class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']
  create a model admin class, then pass it as the second argument to admin.site.register()
    any time you need to change the admin options for a model
    publication date come before question field
  isnt important with two forms, but more important for more fields intuitive order is important
  polls/admin.py
    class QuestionAdmin(admin.ModelAdmin):
      fieldsets = [
        (None,                {'fields' : ['question_text']}),
        ('Date Information',  {'fields' : ['pub_date']})
      ]

    admin.site.register(Question, QuestionAdmin)
    the first element of each tuple in fieldsets is the title of the fieldset

Adding related objects
  A question has multiple choices and the admin page doesnt display choices
  Better to add a bunch of Choices directly when you create the Question object
  remove register() call for the Choice model and edit Question
  polls/admin.py
    class ChoiceInline(admin.StackedInline):
      model = Choice
      extra = 3
    and added inlines = [ChoiceInline]
  this tells Django Choice objects are edited on the question admin page
    by default provide enough fields for 3 choices
  three slots for related Choices - as specified by extra - and each time oyu come back
    to the change page for an already-created object, you get another three extra slots
  cannot remove the original three choices
  takes a lot of screen space to display all the fields
    ChoiceInline(admin.TabularInline)

Customize the admin change list
  Make some tweaks to the change list page (the one that displays all the questions in the system)
  By deafult django displays the str() of each obj, itd be more helpful to display individual fields
    to do that use list_display, a tuple field names to display as columns on the change list page
  polls/models.py
    improve the model a bit
  edit your polls/admin.py and add an improvement to the Question change list page
  list_filter = ['pub_date']
    adds a filter sidebar that lets people filer the change list by pub_date
  search_fields = ['question_text']
    adds a search box at the top of the change list, when somebody enters search terms
      django will search the question_text field

Customize the admin look and feel
  Django administration is goofy, lets make a template
  create a templates directory in your project directory same as manage.py
  mysite/settings.py
    add a DIRS option in the TEMPLATES setting
    'DIRS': [os.path.join(BASE_DIR, 'templates')],
  now create a directory called admin inside templates and copy the template admin/base_site.html
    copied the template base_site.html

Customize your applications template
  Django automatically looks for a templates/ subdirectory within each application package
  polls does not need custom admin templates
  https://docs.djangoproject.com/en/2.2/topics/templates/#template-loading

Customize the admin index page
  by default displays all the apps in INSTALLED_APPS that have been registered with the
    admin applicaiton
  index is the most important page of the admin
  the template to customize is admin/index.html
  DONE








  

